// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snake.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_snake_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_snake_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3016000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3016000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_snake_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_snake_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_snake_2eproto;
namespace PnD {
class GameState;
struct GameStateDefaultTypeInternal;
extern GameStateDefaultTypeInternal _GameState_default_instance_;
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Input;
struct InputDefaultTypeInternal;
extern InputDefaultTypeInternal _Input_default_instance_;
class LoginPetition;
struct LoginPetitionDefaultTypeInternal;
extern LoginPetitionDefaultTypeInternal _LoginPetition_default_instance_;
class LoginResponse;
struct LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class Snake;
struct SnakeDefaultTypeInternal;
extern SnakeDefaultTypeInternal _Snake_default_instance_;
class Vector2D;
struct Vector2DDefaultTypeInternal;
extern Vector2DDefaultTypeInternal _Vector2D_default_instance_;
}  // namespace PnD
PROTOBUF_NAMESPACE_OPEN
template<> ::PnD::GameState* Arena::CreateMaybeMessage<::PnD::GameState>(Arena*);
template<> ::PnD::Header* Arena::CreateMaybeMessage<::PnD::Header>(Arena*);
template<> ::PnD::Input* Arena::CreateMaybeMessage<::PnD::Input>(Arena*);
template<> ::PnD::LoginPetition* Arena::CreateMaybeMessage<::PnD::LoginPetition>(Arena*);
template<> ::PnD::LoginResponse* Arena::CreateMaybeMessage<::PnD::LoginResponse>(Arena*);
template<> ::PnD::Snake* Arena::CreateMaybeMessage<::PnD::Snake>(Arena*);
template<> ::PnD::Vector2D* Arena::CreateMaybeMessage<::PnD::Vector2D>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PnD {

enum MessageID : int {
  LOGINPETITION = 0,
  LOGINRESPONSE = 1,
  GAMESTART = 2,
  GAMEUPDATE = 3,
  INPUTMESSAGE = 4,
  MessageID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageID_IsValid(int value);
constexpr MessageID MessageID_MIN = LOGINPETITION;
constexpr MessageID MessageID_MAX = INPUTMESSAGE;
constexpr int MessageID_ARRAYSIZE = MessageID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageID_descriptor();
template<typename T>
inline const std::string& MessageID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageID_descriptor(), enum_t_value);
}
inline bool MessageID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageID>(
    MessageID_descriptor(), name, value);
}
// ===================================================================

class Vector2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PnD.Vector2D) */ {
 public:
  inline Vector2D() : Vector2D(nullptr) {}
  ~Vector2D() override;
  explicit constexpr Vector2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector2D(const Vector2D& from);
  Vector2D(Vector2D&& from) noexcept
    : Vector2D() {
    *this = ::std::move(from);
  }

  inline Vector2D& operator=(const Vector2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector2D& operator=(Vector2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector2D* internal_default_instance() {
    return reinterpret_cast<const Vector2D*>(
               &_Vector2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector2D& a, Vector2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector2D* New() const final {
    return CreateMaybeMessage<Vector2D>(nullptr);
  }

  Vector2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector2D& from);
  void MergeFrom(const Vector2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PnD.Vector2D";
  }
  protected:
  explicit Vector2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PnD.Vector2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snake_2eproto;
};
// -------------------------------------------------------------------

class Snake PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PnD.Snake) */ {
 public:
  inline Snake() : Snake(nullptr) {}
  ~Snake() override;
  explicit constexpr Snake(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Snake(const Snake& from);
  Snake(Snake&& from) noexcept
    : Snake() {
    *this = ::std::move(from);
  }

  inline Snake& operator=(const Snake& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snake& operator=(Snake&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Snake& default_instance() {
    return *internal_default_instance();
  }
  static inline const Snake* internal_default_instance() {
    return reinterpret_cast<const Snake*>(
               &_Snake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Snake& a, Snake& b) {
    a.Swap(&b);
  }
  inline void Swap(Snake* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Snake* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Snake* New() const final {
    return CreateMaybeMessage<Snake>(nullptr);
  }

  Snake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Snake>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Snake& from);
  void MergeFrom(const Snake& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snake* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PnD.Snake";
  }
  protected:
  explicit Snake(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 2,
    kDirectionFieldNumber = 3,
    kPlayerIDFieldNumber = 1,
  };
  // repeated .PnD.Vector2D body = 2;
  int body_size() const;
  private:
  int _internal_body_size() const;
  public:
  void clear_body();
  ::PnD::Vector2D* mutable_body(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PnD::Vector2D >*
      mutable_body();
  private:
  const ::PnD::Vector2D& _internal_body(int index) const;
  ::PnD::Vector2D* _internal_add_body();
  public:
  const ::PnD::Vector2D& body(int index) const;
  ::PnD::Vector2D* add_body();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PnD::Vector2D >&
      body() const;

  // .PnD.Vector2D direction = 3;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  const ::PnD::Vector2D& direction() const;
  ::PnD::Vector2D* release_direction();
  ::PnD::Vector2D* mutable_direction();
  void set_allocated_direction(::PnD::Vector2D* direction);
  private:
  const ::PnD::Vector2D& _internal_direction() const;
  ::PnD::Vector2D* _internal_mutable_direction();
  public:
  void unsafe_arena_set_allocated_direction(
      ::PnD::Vector2D* direction);
  ::PnD::Vector2D* unsafe_arena_release_direction();

  // int32 playerID = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PnD.Snake)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PnD::Vector2D > body_;
  ::PnD::Vector2D* direction_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snake_2eproto;
};
// -------------------------------------------------------------------

class GameState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PnD.GameState) */ {
 public:
  inline GameState() : GameState(nullptr) {}
  ~GameState() override;
  explicit constexpr GameState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameState(const GameState& from);
  GameState(GameState&& from) noexcept
    : GameState() {
    *this = ::std::move(from);
  }

  inline GameState& operator=(const GameState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameState& operator=(GameState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameState& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameState* internal_default_instance() {
    return reinterpret_cast<const GameState*>(
               &_GameState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GameState& a, GameState& b) {
    a.Swap(&b);
  }
  inline void Swap(GameState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameState* New() const final {
    return CreateMaybeMessage<GameState>(nullptr);
  }

  GameState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameState& from);
  void MergeFrom(const GameState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PnD.GameState";
  }
  protected:
  explicit GameState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 2,
    kFruitFieldNumber = 1,
  };
  // repeated .PnD.Snake players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::PnD::Snake* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PnD::Snake >*
      mutable_players();
  private:
  const ::PnD::Snake& _internal_players(int index) const;
  ::PnD::Snake* _internal_add_players();
  public:
  const ::PnD::Snake& players(int index) const;
  ::PnD::Snake* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PnD::Snake >&
      players() const;

  // .PnD.Vector2D fruit = 1;
  bool has_fruit() const;
  private:
  bool _internal_has_fruit() const;
  public:
  void clear_fruit();
  const ::PnD::Vector2D& fruit() const;
  ::PnD::Vector2D* release_fruit();
  ::PnD::Vector2D* mutable_fruit();
  void set_allocated_fruit(::PnD::Vector2D* fruit);
  private:
  const ::PnD::Vector2D& _internal_fruit() const;
  ::PnD::Vector2D* _internal_mutable_fruit();
  public:
  void unsafe_arena_set_allocated_fruit(
      ::PnD::Vector2D* fruit);
  ::PnD::Vector2D* unsafe_arena_release_fruit();

  // @@protoc_insertion_point(class_scope:PnD.GameState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PnD::Snake > players_;
  ::PnD::Vector2D* fruit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snake_2eproto;
};
// -------------------------------------------------------------------

class LoginPetition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PnD.LoginPetition) */ {
 public:
  inline LoginPetition() : LoginPetition(nullptr) {}
  ~LoginPetition() override;
  explicit constexpr LoginPetition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginPetition(const LoginPetition& from);
  LoginPetition(LoginPetition&& from) noexcept
    : LoginPetition() {
    *this = ::std::move(from);
  }

  inline LoginPetition& operator=(const LoginPetition& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginPetition& operator=(LoginPetition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginPetition& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginPetition* internal_default_instance() {
    return reinterpret_cast<const LoginPetition*>(
               &_LoginPetition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LoginPetition& a, LoginPetition& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginPetition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginPetition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginPetition* New() const final {
    return CreateMaybeMessage<LoginPetition>(nullptr);
  }

  LoginPetition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginPetition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginPetition& from);
  void MergeFrom(const LoginPetition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginPetition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PnD.LoginPetition";
  }
  protected:
  explicit LoginPetition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickFieldNumber = 1,
  };
  // string nick = 1;
  void clear_nick();
  const std::string& nick() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nick(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nick();
  std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // @@protoc_insertion_point(class_scope:PnD.LoginPetition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snake_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PnD.LoginResponse) */ {
 public:
  inline LoginResponse() : LoginResponse(nullptr) {}
  ~LoginResponse() override;
  explicit constexpr LoginResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginResponse(const LoginResponse& from);
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const final {
    return CreateMaybeMessage<LoginResponse>(nullptr);
  }

  LoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PnD.LoginResponse";
  }
  protected:
  explicit LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssignedIdFieldNumber = 1,
  };
  // int32 assignedId = 1;
  void clear_assignedid();
  ::PROTOBUF_NAMESPACE_ID::int32 assignedid() const;
  void set_assignedid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_assignedid() const;
  void _internal_set_assignedid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PnD.LoginResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 assignedid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snake_2eproto;
};
// -------------------------------------------------------------------

class Header PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PnD.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  ~Header() override;
  explicit constexpr Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(nullptr);
  }

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PnD.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgIDFieldNumber = 1,
  };
  // .PnD.MessageID msgID = 1;
  void clear_msgid();
  ::PnD::MessageID msgid() const;
  void set_msgid(::PnD::MessageID value);
  private:
  ::PnD::MessageID _internal_msgid() const;
  void _internal_set_msgid(::PnD::MessageID value);
  public:

  // @@protoc_insertion_point(class_scope:PnD.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int msgid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snake_2eproto;
};
// -------------------------------------------------------------------

class Input PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PnD.Input) */ {
 public:
  inline Input() : Input(nullptr) {}
  ~Input() override;
  explicit constexpr Input(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Input(const Input& from);
  Input(Input&& from) noexcept
    : Input() {
    *this = ::std::move(from);
  }

  inline Input& operator=(const Input& from) {
    CopyFrom(from);
    return *this;
  }
  inline Input& operator=(Input&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Input& default_instance() {
    return *internal_default_instance();
  }
  static inline const Input* internal_default_instance() {
    return reinterpret_cast<const Input*>(
               &_Input_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Input& a, Input& b) {
    a.Swap(&b);
  }
  inline void Swap(Input* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Input* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Input* New() const final {
    return CreateMaybeMessage<Input>(nullptr);
  }

  Input* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Input>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Input& from);
  void MergeFrom(const Input& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Input* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PnD.Input";
  }
  protected:
  explicit Input(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectionFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // .PnD.Vector2D direction = 2;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  const ::PnD::Vector2D& direction() const;
  ::PnD::Vector2D* release_direction();
  ::PnD::Vector2D* mutable_direction();
  void set_allocated_direction(::PnD::Vector2D* direction);
  private:
  const ::PnD::Vector2D& _internal_direction() const;
  ::PnD::Vector2D* _internal_mutable_direction();
  public:
  void unsafe_arena_set_allocated_direction(
      ::PnD::Vector2D* direction);
  ::PnD::Vector2D* unsafe_arena_release_direction();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PnD.Input)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PnD::Vector2D* direction_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snake_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector2D

// int32 x = 1;
inline void Vector2D::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vector2D::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vector2D::x() const {
  // @@protoc_insertion_point(field_get:PnD.Vector2D.x)
  return _internal_x();
}
inline void Vector2D::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void Vector2D::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:PnD.Vector2D.x)
}

// int32 y = 2;
inline void Vector2D::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vector2D::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vector2D::y() const {
  // @@protoc_insertion_point(field_get:PnD.Vector2D.y)
  return _internal_y();
}
inline void Vector2D::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void Vector2D::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:PnD.Vector2D.y)
}

// -------------------------------------------------------------------

// Snake

// int32 playerID = 1;
inline void Snake::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Snake::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Snake::playerid() const {
  // @@protoc_insertion_point(field_get:PnD.Snake.playerID)
  return _internal_playerid();
}
inline void Snake::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void Snake::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:PnD.Snake.playerID)
}

// repeated .PnD.Vector2D body = 2;
inline int Snake::_internal_body_size() const {
  return body_.size();
}
inline int Snake::body_size() const {
  return _internal_body_size();
}
inline void Snake::clear_body() {
  body_.Clear();
}
inline ::PnD::Vector2D* Snake::mutable_body(int index) {
  // @@protoc_insertion_point(field_mutable:PnD.Snake.body)
  return body_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PnD::Vector2D >*
Snake::mutable_body() {
  // @@protoc_insertion_point(field_mutable_list:PnD.Snake.body)
  return &body_;
}
inline const ::PnD::Vector2D& Snake::_internal_body(int index) const {
  return body_.Get(index);
}
inline const ::PnD::Vector2D& Snake::body(int index) const {
  // @@protoc_insertion_point(field_get:PnD.Snake.body)
  return _internal_body(index);
}
inline ::PnD::Vector2D* Snake::_internal_add_body() {
  return body_.Add();
}
inline ::PnD::Vector2D* Snake::add_body() {
  // @@protoc_insertion_point(field_add:PnD.Snake.body)
  return _internal_add_body();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PnD::Vector2D >&
Snake::body() const {
  // @@protoc_insertion_point(field_list:PnD.Snake.body)
  return body_;
}

// .PnD.Vector2D direction = 3;
inline bool Snake::_internal_has_direction() const {
  return this != internal_default_instance() && direction_ != nullptr;
}
inline bool Snake::has_direction() const {
  return _internal_has_direction();
}
inline void Snake::clear_direction() {
  if (GetArena() == nullptr && direction_ != nullptr) {
    delete direction_;
  }
  direction_ = nullptr;
}
inline const ::PnD::Vector2D& Snake::_internal_direction() const {
  const ::PnD::Vector2D* p = direction_;
  return p != nullptr ? *p : reinterpret_cast<const ::PnD::Vector2D&>(
      ::PnD::_Vector2D_default_instance_);
}
inline const ::PnD::Vector2D& Snake::direction() const {
  // @@protoc_insertion_point(field_get:PnD.Snake.direction)
  return _internal_direction();
}
inline void Snake::unsafe_arena_set_allocated_direction(
    ::PnD::Vector2D* direction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction_);
  }
  direction_ = direction;
  if (direction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PnD.Snake.direction)
}
inline ::PnD::Vector2D* Snake::release_direction() {
  
  ::PnD::Vector2D* temp = direction_;
  direction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PnD::Vector2D* Snake::unsafe_arena_release_direction() {
  // @@protoc_insertion_point(field_release:PnD.Snake.direction)
  
  ::PnD::Vector2D* temp = direction_;
  direction_ = nullptr;
  return temp;
}
inline ::PnD::Vector2D* Snake::_internal_mutable_direction() {
  
  if (direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::PnD::Vector2D>(GetArena());
    direction_ = p;
  }
  return direction_;
}
inline ::PnD::Vector2D* Snake::mutable_direction() {
  // @@protoc_insertion_point(field_mutable:PnD.Snake.direction)
  return _internal_mutable_direction();
}
inline void Snake::set_allocated_direction(::PnD::Vector2D* direction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete direction_;
  }
  if (direction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(direction);
    if (message_arena != submessage_arena) {
      direction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:PnD.Snake.direction)
}

// -------------------------------------------------------------------

// GameState

// .PnD.Vector2D fruit = 1;
inline bool GameState::_internal_has_fruit() const {
  return this != internal_default_instance() && fruit_ != nullptr;
}
inline bool GameState::has_fruit() const {
  return _internal_has_fruit();
}
inline void GameState::clear_fruit() {
  if (GetArena() == nullptr && fruit_ != nullptr) {
    delete fruit_;
  }
  fruit_ = nullptr;
}
inline const ::PnD::Vector2D& GameState::_internal_fruit() const {
  const ::PnD::Vector2D* p = fruit_;
  return p != nullptr ? *p : reinterpret_cast<const ::PnD::Vector2D&>(
      ::PnD::_Vector2D_default_instance_);
}
inline const ::PnD::Vector2D& GameState::fruit() const {
  // @@protoc_insertion_point(field_get:PnD.GameState.fruit)
  return _internal_fruit();
}
inline void GameState::unsafe_arena_set_allocated_fruit(
    ::PnD::Vector2D* fruit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fruit_);
  }
  fruit_ = fruit;
  if (fruit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PnD.GameState.fruit)
}
inline ::PnD::Vector2D* GameState::release_fruit() {
  
  ::PnD::Vector2D* temp = fruit_;
  fruit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PnD::Vector2D* GameState::unsafe_arena_release_fruit() {
  // @@protoc_insertion_point(field_release:PnD.GameState.fruit)
  
  ::PnD::Vector2D* temp = fruit_;
  fruit_ = nullptr;
  return temp;
}
inline ::PnD::Vector2D* GameState::_internal_mutable_fruit() {
  
  if (fruit_ == nullptr) {
    auto* p = CreateMaybeMessage<::PnD::Vector2D>(GetArena());
    fruit_ = p;
  }
  return fruit_;
}
inline ::PnD::Vector2D* GameState::mutable_fruit() {
  // @@protoc_insertion_point(field_mutable:PnD.GameState.fruit)
  return _internal_mutable_fruit();
}
inline void GameState::set_allocated_fruit(::PnD::Vector2D* fruit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fruit_;
  }
  if (fruit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fruit);
    if (message_arena != submessage_arena) {
      fruit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fruit, submessage_arena);
    }
    
  } else {
    
  }
  fruit_ = fruit;
  // @@protoc_insertion_point(field_set_allocated:PnD.GameState.fruit)
}

// repeated .PnD.Snake players = 2;
inline int GameState::_internal_players_size() const {
  return players_.size();
}
inline int GameState::players_size() const {
  return _internal_players_size();
}
inline void GameState::clear_players() {
  players_.Clear();
}
inline ::PnD::Snake* GameState::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:PnD.GameState.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PnD::Snake >*
GameState::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:PnD.GameState.players)
  return &players_;
}
inline const ::PnD::Snake& GameState::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::PnD::Snake& GameState::players(int index) const {
  // @@protoc_insertion_point(field_get:PnD.GameState.players)
  return _internal_players(index);
}
inline ::PnD::Snake* GameState::_internal_add_players() {
  return players_.Add();
}
inline ::PnD::Snake* GameState::add_players() {
  // @@protoc_insertion_point(field_add:PnD.GameState.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PnD::Snake >&
GameState::players() const {
  // @@protoc_insertion_point(field_list:PnD.GameState.players)
  return players_;
}

// -------------------------------------------------------------------

// LoginPetition

// string nick = 1;
inline void LoginPetition::clear_nick() {
  nick_.ClearToEmpty();
}
inline const std::string& LoginPetition::nick() const {
  // @@protoc_insertion_point(field_get:PnD.LoginPetition.nick)
  return _internal_nick();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void LoginPetition::set_nick(ArgT0&& arg0, ArgT... args) {
 
 nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:PnD.LoginPetition.nick)
}
inline std::string* LoginPetition::mutable_nick() {
  // @@protoc_insertion_point(field_mutable:PnD.LoginPetition.nick)
  return _internal_mutable_nick();
}
inline const std::string& LoginPetition::_internal_nick() const {
  return nick_.Get();
}
inline void LoginPetition::_internal_set_nick(const std::string& value) {
  
  nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* LoginPetition::_internal_mutable_nick() {
  
  return nick_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoginPetition::release_nick() {
  // @@protoc_insertion_point(field_release:PnD.LoginPetition.nick)
  return nick_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginPetition::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  nick_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PnD.LoginPetition.nick)
}

// -------------------------------------------------------------------

// LoginResponse

// int32 assignedId = 1;
inline void LoginResponse::clear_assignedid() {
  assignedid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginResponse::_internal_assignedid() const {
  return assignedid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginResponse::assignedid() const {
  // @@protoc_insertion_point(field_get:PnD.LoginResponse.assignedId)
  return _internal_assignedid();
}
inline void LoginResponse::_internal_set_assignedid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  assignedid_ = value;
}
inline void LoginResponse::set_assignedid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_assignedid(value);
  // @@protoc_insertion_point(field_set:PnD.LoginResponse.assignedId)
}

// -------------------------------------------------------------------

// Header

// .PnD.MessageID msgID = 1;
inline void Header::clear_msgid() {
  msgid_ = 0;
}
inline ::PnD::MessageID Header::_internal_msgid() const {
  return static_cast< ::PnD::MessageID >(msgid_);
}
inline ::PnD::MessageID Header::msgid() const {
  // @@protoc_insertion_point(field_get:PnD.Header.msgID)
  return _internal_msgid();
}
inline void Header::_internal_set_msgid(::PnD::MessageID value) {
  
  msgid_ = value;
}
inline void Header::set_msgid(::PnD::MessageID value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:PnD.Header.msgID)
}

// -------------------------------------------------------------------

// Input

// int32 id = 1;
inline void Input::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Input::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Input::id() const {
  // @@protoc_insertion_point(field_get:PnD.Input.id)
  return _internal_id();
}
inline void Input::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Input::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PnD.Input.id)
}

// .PnD.Vector2D direction = 2;
inline bool Input::_internal_has_direction() const {
  return this != internal_default_instance() && direction_ != nullptr;
}
inline bool Input::has_direction() const {
  return _internal_has_direction();
}
inline void Input::clear_direction() {
  if (GetArena() == nullptr && direction_ != nullptr) {
    delete direction_;
  }
  direction_ = nullptr;
}
inline const ::PnD::Vector2D& Input::_internal_direction() const {
  const ::PnD::Vector2D* p = direction_;
  return p != nullptr ? *p : reinterpret_cast<const ::PnD::Vector2D&>(
      ::PnD::_Vector2D_default_instance_);
}
inline const ::PnD::Vector2D& Input::direction() const {
  // @@protoc_insertion_point(field_get:PnD.Input.direction)
  return _internal_direction();
}
inline void Input::unsafe_arena_set_allocated_direction(
    ::PnD::Vector2D* direction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction_);
  }
  direction_ = direction;
  if (direction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PnD.Input.direction)
}
inline ::PnD::Vector2D* Input::release_direction() {
  
  ::PnD::Vector2D* temp = direction_;
  direction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PnD::Vector2D* Input::unsafe_arena_release_direction() {
  // @@protoc_insertion_point(field_release:PnD.Input.direction)
  
  ::PnD::Vector2D* temp = direction_;
  direction_ = nullptr;
  return temp;
}
inline ::PnD::Vector2D* Input::_internal_mutable_direction() {
  
  if (direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::PnD::Vector2D>(GetArena());
    direction_ = p;
  }
  return direction_;
}
inline ::PnD::Vector2D* Input::mutable_direction() {
  // @@protoc_insertion_point(field_mutable:PnD.Input.direction)
  return _internal_mutable_direction();
}
inline void Input::set_allocated_direction(::PnD::Vector2D* direction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete direction_;
  }
  if (direction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(direction);
    if (message_arena != submessage_arena) {
      direction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:PnD.Input.direction)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PnD

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PnD::MessageID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PnD::MessageID>() {
  return ::PnD::MessageID_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_snake_2eproto
