// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snake.proto

#ifndef PROTOBUF_INCLUDED_snake_2eproto
#define PROTOBUF_INCLUDED_snake_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_snake_2eproto 

namespace protobuf_snake_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_snake_2eproto
namespace PnD {
class GameState;
class GameStateDefaultTypeInternal;
extern GameStateDefaultTypeInternal _GameState_default_instance_;
class Snake;
class SnakeDefaultTypeInternal;
extern SnakeDefaultTypeInternal _Snake_default_instance_;
class Vector2D;
class Vector2DDefaultTypeInternal;
extern Vector2DDefaultTypeInternal _Vector2D_default_instance_;
}  // namespace PnD
namespace google {
namespace protobuf {
template<> ::PnD::GameState* Arena::CreateMaybeMessage<::PnD::GameState>(Arena*);
template<> ::PnD::Snake* Arena::CreateMaybeMessage<::PnD::Snake>(Arena*);
template<> ::PnD::Vector2D* Arena::CreateMaybeMessage<::PnD::Vector2D>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace PnD {

// ===================================================================

class Vector2D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PnD.Vector2D) */ {
 public:
  Vector2D();
  virtual ~Vector2D();

  Vector2D(const Vector2D& from);

  inline Vector2D& operator=(const Vector2D& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector2D(Vector2D&& from) noexcept
    : Vector2D() {
    *this = ::std::move(from);
  }

  inline Vector2D& operator=(Vector2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector2D* internal_default_instance() {
    return reinterpret_cast<const Vector2D*>(
               &_Vector2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Vector2D* other);
  friend void swap(Vector2D& a, Vector2D& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector2D* New() const final {
    return CreateMaybeMessage<Vector2D>(NULL);
  }

  Vector2D* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Vector2D>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Vector2D& from);
  void MergeFrom(const Vector2D& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector2D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PnD.Vector2D)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_snake_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Snake : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PnD.Snake) */ {
 public:
  Snake();
  virtual ~Snake();

  Snake(const Snake& from);

  inline Snake& operator=(const Snake& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Snake(Snake&& from) noexcept
    : Snake() {
    *this = ::std::move(from);
  }

  inline Snake& operator=(Snake&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Snake& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Snake* internal_default_instance() {
    return reinterpret_cast<const Snake*>(
               &_Snake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Snake* other);
  friend void swap(Snake& a, Snake& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Snake* New() const final {
    return CreateMaybeMessage<Snake>(NULL);
  }

  Snake* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Snake>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Snake& from);
  void MergeFrom(const Snake& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snake* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PnD.Vector2D body = 2;
  int body_size() const;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  ::PnD::Vector2D* mutable_body(int index);
  ::google::protobuf::RepeatedPtrField< ::PnD::Vector2D >*
      mutable_body();
  const ::PnD::Vector2D& body(int index) const;
  ::PnD::Vector2D* add_body();
  const ::google::protobuf::RepeatedPtrField< ::PnD::Vector2D >&
      body() const;

  // .PnD.Vector2D direction = 3;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 3;
  private:
  const ::PnD::Vector2D& _internal_direction() const;
  public:
  const ::PnD::Vector2D& direction() const;
  ::PnD::Vector2D* release_direction();
  ::PnD::Vector2D* mutable_direction();
  void set_allocated_direction(::PnD::Vector2D* direction);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PnD.Snake)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::PnD::Vector2D > body_;
  ::PnD::Vector2D* direction_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_snake_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PnD.GameState) */ {
 public:
  GameState();
  virtual ~GameState();

  GameState(const GameState& from);

  inline GameState& operator=(const GameState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameState(GameState&& from) noexcept
    : GameState() {
    *this = ::std::move(from);
  }

  inline GameState& operator=(GameState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameState* internal_default_instance() {
    return reinterpret_cast<const GameState*>(
               &_GameState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GameState* other);
  friend void swap(GameState& a, GameState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameState* New() const final {
    return CreateMaybeMessage<GameState>(NULL);
  }

  GameState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameState& from);
  void MergeFrom(const GameState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PnD.Snake players = 2;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 2;
  ::PnD::Snake* mutable_players(int index);
  ::google::protobuf::RepeatedPtrField< ::PnD::Snake >*
      mutable_players();
  const ::PnD::Snake& players(int index) const;
  ::PnD::Snake* add_players();
  const ::google::protobuf::RepeatedPtrField< ::PnD::Snake >&
      players() const;

  // .PnD.Vector2D fruit = 1;
  bool has_fruit() const;
  void clear_fruit();
  static const int kFruitFieldNumber = 1;
  private:
  const ::PnD::Vector2D& _internal_fruit() const;
  public:
  const ::PnD::Vector2D& fruit() const;
  ::PnD::Vector2D* release_fruit();
  ::PnD::Vector2D* mutable_fruit();
  void set_allocated_fruit(::PnD::Vector2D* fruit);

  // @@protoc_insertion_point(class_scope:PnD.GameState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::PnD::Snake > players_;
  ::PnD::Vector2D* fruit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_snake_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector2D

// int32 x = 1;
inline void Vector2D::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Vector2D::x() const {
  // @@protoc_insertion_point(field_get:PnD.Vector2D.x)
  return x_;
}
inline void Vector2D::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:PnD.Vector2D.x)
}

// int32 y = 2;
inline void Vector2D::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Vector2D::y() const {
  // @@protoc_insertion_point(field_get:PnD.Vector2D.y)
  return y_;
}
inline void Vector2D::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:PnD.Vector2D.y)
}

// -------------------------------------------------------------------

// Snake

// int32 id = 1;
inline void Snake::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Snake::id() const {
  // @@protoc_insertion_point(field_get:PnD.Snake.id)
  return id_;
}
inline void Snake::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:PnD.Snake.id)
}

// repeated .PnD.Vector2D body = 2;
inline int Snake::body_size() const {
  return body_.size();
}
inline void Snake::clear_body() {
  body_.Clear();
}
inline ::PnD::Vector2D* Snake::mutable_body(int index) {
  // @@protoc_insertion_point(field_mutable:PnD.Snake.body)
  return body_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::PnD::Vector2D >*
Snake::mutable_body() {
  // @@protoc_insertion_point(field_mutable_list:PnD.Snake.body)
  return &body_;
}
inline const ::PnD::Vector2D& Snake::body(int index) const {
  // @@protoc_insertion_point(field_get:PnD.Snake.body)
  return body_.Get(index);
}
inline ::PnD::Vector2D* Snake::add_body() {
  // @@protoc_insertion_point(field_add:PnD.Snake.body)
  return body_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PnD::Vector2D >&
Snake::body() const {
  // @@protoc_insertion_point(field_list:PnD.Snake.body)
  return body_;
}

// .PnD.Vector2D direction = 3;
inline bool Snake::has_direction() const {
  return this != internal_default_instance() && direction_ != NULL;
}
inline void Snake::clear_direction() {
  if (GetArenaNoVirtual() == NULL && direction_ != NULL) {
    delete direction_;
  }
  direction_ = NULL;
}
inline const ::PnD::Vector2D& Snake::_internal_direction() const {
  return *direction_;
}
inline const ::PnD::Vector2D& Snake::direction() const {
  const ::PnD::Vector2D* p = direction_;
  // @@protoc_insertion_point(field_get:PnD.Snake.direction)
  return p != NULL ? *p : *reinterpret_cast<const ::PnD::Vector2D*>(
      &::PnD::_Vector2D_default_instance_);
}
inline ::PnD::Vector2D* Snake::release_direction() {
  // @@protoc_insertion_point(field_release:PnD.Snake.direction)
  
  ::PnD::Vector2D* temp = direction_;
  direction_ = NULL;
  return temp;
}
inline ::PnD::Vector2D* Snake::mutable_direction() {
  
  if (direction_ == NULL) {
    auto* p = CreateMaybeMessage<::PnD::Vector2D>(GetArenaNoVirtual());
    direction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:PnD.Snake.direction)
  return direction_;
}
inline void Snake::set_allocated_direction(::PnD::Vector2D* direction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete direction_;
  }
  if (direction) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      direction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:PnD.Snake.direction)
}

// -------------------------------------------------------------------

// GameState

// .PnD.Vector2D fruit = 1;
inline bool GameState::has_fruit() const {
  return this != internal_default_instance() && fruit_ != NULL;
}
inline void GameState::clear_fruit() {
  if (GetArenaNoVirtual() == NULL && fruit_ != NULL) {
    delete fruit_;
  }
  fruit_ = NULL;
}
inline const ::PnD::Vector2D& GameState::_internal_fruit() const {
  return *fruit_;
}
inline const ::PnD::Vector2D& GameState::fruit() const {
  const ::PnD::Vector2D* p = fruit_;
  // @@protoc_insertion_point(field_get:PnD.GameState.fruit)
  return p != NULL ? *p : *reinterpret_cast<const ::PnD::Vector2D*>(
      &::PnD::_Vector2D_default_instance_);
}
inline ::PnD::Vector2D* GameState::release_fruit() {
  // @@protoc_insertion_point(field_release:PnD.GameState.fruit)
  
  ::PnD::Vector2D* temp = fruit_;
  fruit_ = NULL;
  return temp;
}
inline ::PnD::Vector2D* GameState::mutable_fruit() {
  
  if (fruit_ == NULL) {
    auto* p = CreateMaybeMessage<::PnD::Vector2D>(GetArenaNoVirtual());
    fruit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:PnD.GameState.fruit)
  return fruit_;
}
inline void GameState::set_allocated_fruit(::PnD::Vector2D* fruit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fruit_;
  }
  if (fruit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fruit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fruit, submessage_arena);
    }
    
  } else {
    
  }
  fruit_ = fruit;
  // @@protoc_insertion_point(field_set_allocated:PnD.GameState.fruit)
}

// repeated .PnD.Snake players = 2;
inline int GameState::players_size() const {
  return players_.size();
}
inline void GameState::clear_players() {
  players_.Clear();
}
inline ::PnD::Snake* GameState::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:PnD.GameState.players)
  return players_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::PnD::Snake >*
GameState::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:PnD.GameState.players)
  return &players_;
}
inline const ::PnD::Snake& GameState::players(int index) const {
  // @@protoc_insertion_point(field_get:PnD.GameState.players)
  return players_.Get(index);
}
inline ::PnD::Snake* GameState::add_players() {
  // @@protoc_insertion_point(field_add:PnD.GameState.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PnD::Snake >&
GameState::players() const {
  // @@protoc_insertion_point(field_list:PnD.GameState.players)
  return players_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PnD

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_snake_2eproto
